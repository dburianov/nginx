filter {
    if "ModSecurity-nginx" in [transaction][producer][connector] {
        json {
            source => "message"
        }
        if "_jsonparsefailure" not in [tags] {
            mutate {
                remove_field => ["[transaction][response][body]",
                "[event][original]"
                ]
            }
        }
        json {
            source => "[transaction][messages]"
            target => "[transaction][details]"
            tag_on_failure => "_jsonparsefailure_transaction_messages"
        }
        date {
            match => [ "[transaction][time_stamp]", "EEE MMM d H:m:s YYYY", "EEE MMM  d H:m:s YYYY" ]
            target => [ "logdatetime" ]
        }
        useragent {
            source => "[transaction][request][headers][User-Agent]"
            target => "[request][ua]"
        }
        geoip {
            database => "/geoip/GeoLite2-ASN.mmdb"
            source => "[transaction][client_ip]"
            target => "[request][geo]"
        }
    }
    else if "nginx" in [nginx_logs][type] {
        json {
            source => "message"
        }
        if "_jsonparsefailure" not in [tags] {
            mutate {
                remove_field => ["message",
                "[event][original]"
                ]
            }
        }
        useragent {
            source => "[http][http_user_agent]"
            target => "[request][ua]"
        }
        geoip {
            database => "/geoip/GeoLite2-ASN.mmdb"
            source => "[remote][remote_addr]"
            target => "[request][geo]"
        }
    }
    else {
        grok {
            match => {
                "message" => [
                    '(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:[nginx][error][level]}\] %{POSINT:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}\: \*%{NUMBER:[nginx][error][connection_id]} %{GREEDYDATA:[nginx][error][message]}, client: %{IP:[nginx][access][remote_ip]}, server: %{GREEDYDATA:server}, request: %{GREEDYDATA:request}',
    			    '(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:[nginx][error][level]}\] %{POSINT:[nginx][error][pid]}#%{NUMBER:[nginx][error][tid]}\: %{GREEDYDATA:[nginx][error][message]}',
                    '(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:severity}\] %{GREEDYDATA:modsecurity}, client: %{IP:client}, server: %{GREEDYDATA:server}, request: \"%{WORD:requesttype} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})\", host: \"%{DATA:host}\", referrer: \"%{GREEDYDATA:referrer}\"'
                ]
            }
        }
    }
    if "_jsonparsefailure" not in [tags] {
        mutate {
            remove_field => [
                "@version",
                "[event][original]",
                "host"
                ]
            }
    }
    mutate {
        remove_field => [
            "[http][method]",
            "[http][request][body][bytes]",
            "[http][request][mime_type]",
            "[http][version]",
            "[url][domain]",
            "[url][path]",
            "[url][port]",
            "[user_agent][original]",
            "[timestamp]",
            "[@timestamp]"
        ]
    }
}
}
